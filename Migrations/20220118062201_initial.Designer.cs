// <auto-generated />
using System;
using Flow;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flow.Migrations
{
    [DbContext(typeof(FlowDBContext))]
    [Migration("20220118062201_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Flow.WPF.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Acronym")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Area")
                        .HasColumnType("int");

                    b.Property<string>("Chainage")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Drawing")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MHNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("TMP")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Flow.WPF.Models.SiteVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTimeVisit")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteVisits");
                });

            modelBuilder.Entity("Flow.WPF.Models.Verification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SampleRateSeconds")
                        .HasColumnType("int");

                    b.Property<int?>("SiteVisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteVisitId");

                    b.ToTable("Verifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Verification");
                });

            modelBuilder.Entity("Flow.WPF.Models.VerificationMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MType")
                        .HasColumnType("int");

                    b.Property<double>("MValue")
                        .HasColumnType("float");

                    b.Property<int>("UType")
                        .HasColumnType("int");

                    b.Property<int?>("VerificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VerificationId");

                    b.ToTable("VerificationMeasurements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("VerificationMeasurement");
                });

            modelBuilder.Entity("Flow.WPF.Models.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Flow.WPF.Models.BathMeasurement", b =>
                {
                    b.HasBaseType("Flow.WPF.Models.VerificationMeasurement");

                    b.Property<int>("BathType")
                        .HasColumnType("int");

                    b.Property<int?>("DyeVerificationId")
                        .HasColumnType("int")
                        .HasColumnName("BathMeasurement_DyeVerificationId");

                    b.HasIndex("DyeVerificationId");

                    b.HasDiscriminator().HasValue("BathMeasurement");
                });

            modelBuilder.Entity("Flow.WPF.Models.ClampOnMeasurement", b =>
                {
                    b.HasBaseType("Flow.WPF.Models.VerificationMeasurement");

                    b.Property<string>("MeterName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("ClampOnMeasurement_TimeStamp");

                    b.HasDiscriminator().HasValue("ClampOnMeasurement");
                });

            modelBuilder.Entity("Flow.WPF.Models.ClampOnVerification", b =>
                {
                    b.HasBaseType("Flow.WPF.Models.Verification");

                    b.Property<string>("MeterType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SensorType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("ClampOnVerification");
                });

            modelBuilder.Entity("Flow.WPF.Models.DyeMeasurement", b =>
                {
                    b.HasBaseType("Flow.WPF.Models.VerificationMeasurement");

                    b.Property<int?>("DyeVerificationId")
                        .HasColumnType("int");

                    b.Property<double>("FlowRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("DyeMeasurement_TimeStamp");

                    b.Property<int>("UnitType")
                        .HasColumnType("int")
                        .HasColumnName("DyeMeasurement_UnitType");

                    b.HasIndex("DyeVerificationId");

                    b.HasDiscriminator().HasValue("DyeMeasurement");
                });

            modelBuilder.Entity("Flow.WPF.Models.DyeVerification", b =>
                {
                    b.HasBaseType("Flow.WPF.Models.Verification");

                    b.Property<double?>("CalculateInjectionRate")
                        .HasColumnType("float");

                    b.Property<double?>("ClearDyePPB")
                        .HasColumnType("float");

                    b.Property<double?>("ClearIntercept")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DyeEnded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DyeStarted")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ManualInjectionRate")
                        .HasColumnType("float");

                    b.Property<double?>("RecoveryRatio")
                        .HasColumnType("float");

                    b.Property<double?>("SewerDyePPB")
                        .HasColumnType("float");

                    b.Property<double?>("SewerIntercept")
                        .HasColumnType("float");

                    b.Property<string>("VerificationInstrumentName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<double?>("WeightAfter")
                        .HasColumnType("float");

                    b.Property<double?>("WeightBefore")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("DyeVerification");
                });

            modelBuilder.Entity("Flow.WPF.Models.ManualMeasurement", b =>
                {
                    b.HasBaseType("Flow.WPF.Models.VerificationMeasurement");

                    b.Property<int>("MeasurementType")
                        .HasColumnType("int");

                    b.Property<double>("MeterValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ManualMeasurement");
                });

            modelBuilder.Entity("Flow.WPF.Models.ManualVerification", b =>
                {
                    b.HasBaseType("Flow.WPF.Models.Verification");

                    b.Property<bool>("EntryRequired")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ManualVerification");
                });

            modelBuilder.Entity("Flow.WPF.Models.Site", b =>
                {
                    b.OwnsOne("Flow.WPF.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("SiteId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("GPSLocation")
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Street")
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.Property<string>("StreetNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("SiteId");

                            b1.ToTable("Adresses");

                            b1.WithOwner("Site")
                                .HasForeignKey("SiteId");

                            b1.Navigation("Site");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Flow.WPF.Models.SiteVisit", b =>
                {
                    b.HasOne("Flow.WPF.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");

                    b.OwnsOne("Flow.WPF.Models.CheckList", "CheckList", b1 =>
                        {
                            b1.Property<int>("SiteVisitId")
                                .HasColumnType("int");

                            b1.Property<bool?>("BatteryChanged")
                                .HasColumnType("bit");

                            b1.Property<bool?>("Calibrated")
                                .HasColumnType("bit");

                            b1.Property<bool?>("EquipmentInstalled")
                                .HasColumnType("bit");

                            b1.Property<bool?>("EquipmentRemoved")
                                .HasColumnType("bit");

                            b1.Property<bool?>("EquipmentRepaired")
                                .HasColumnType("bit");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool?>("Inspected")
                                .HasColumnType("bit");

                            b1.Property<bool?>("SensorCleaned")
                                .HasColumnType("bit");

                            b1.Property<bool?>("Verified")
                                .HasColumnType("bit");

                            b1.HasKey("SiteVisitId");

                            b1.ToTable("CheckLists");

                            b1.WithOwner("SiteVisit")
                                .HasForeignKey("SiteVisitId");

                            b1.Navigation("SiteVisit");
                        });

                    b.Navigation("CheckList");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Flow.WPF.Models.Verification", b =>
                {
                    b.HasOne("Flow.WPF.Models.SiteVisit", "SiteVisit")
                        .WithMany("Verifications")
                        .HasForeignKey("SiteVisitId");

                    b.Navigation("SiteVisit");
                });

            modelBuilder.Entity("Flow.WPF.Models.VerificationMeasurement", b =>
                {
                    b.HasOne("Flow.WPF.Models.Verification", null)
                        .WithMany("VerificationMeasurements")
                        .HasForeignKey("VerificationId");
                });

            modelBuilder.Entity("Flow.WPF.Models.WorkOrder", b =>
                {
                    b.HasOne("Flow.WPF.Models.Site", "Site")
                        .WithMany("WorkOrders")
                        .HasForeignKey("SiteId");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Flow.WPF.Models.BathMeasurement", b =>
                {
                    b.HasOne("Flow.WPF.Models.DyeVerification", null)
                        .WithMany("BathMeasurement")
                        .HasForeignKey("DyeVerificationId");
                });

            modelBuilder.Entity("Flow.WPF.Models.DyeMeasurement", b =>
                {
                    b.HasOne("Flow.WPF.Models.DyeVerification", null)
                        .WithMany("DyeMeasurement")
                        .HasForeignKey("DyeVerificationId");
                });

            modelBuilder.Entity("Flow.WPF.Models.DyeVerification", b =>
                {
                    b.OwnsOne("Flow.WPF.Models.Calibration", "CalibrationUsed", b1 =>
                        {
                            b1.Property<int>("DyeVerificationId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("DateCalibrated")
                                .HasColumnType("datetime2");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<double?>("Intercept")
                                .HasColumnType("float");

                            b1.Property<double?>("Slope")
                                .HasColumnType("float");

                            b1.Property<double?>("TargetppB")
                                .HasColumnType("float");

                            b1.HasKey("DyeVerificationId");

                            b1.ToTable("Calibrations");

                            b1.WithOwner("DyeVerification")
                                .HasForeignKey("DyeVerificationId");

                            b1.Navigation("DyeVerification");
                        });

                    b.Navigation("CalibrationUsed");
                });

            modelBuilder.Entity("Flow.WPF.Models.Site", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("Flow.WPF.Models.SiteVisit", b =>
                {
                    b.Navigation("Verifications");
                });

            modelBuilder.Entity("Flow.WPF.Models.Verification", b =>
                {
                    b.Navigation("VerificationMeasurements");
                });

            modelBuilder.Entity("Flow.WPF.Models.DyeVerification", b =>
                {
                    b.Navigation("BathMeasurement");

                    b.Navigation("DyeMeasurement");
                });
#pragma warning restore 612, 618
        }
    }
}
